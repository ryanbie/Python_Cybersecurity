'''
In your work as an analyst, imagine there is a device only users specified on an allow list can access, and its device ID is "72e08x0".
In the following code cell, assign this value to a variable named device_id. Then, display the contents of the variable and observe the output.
'''

device_id = "72e08x0"
print(device_id)

'''
Now that the variable device_id is defined, you can return its data type.
In this task, use a Python function to find the data type of the variable device_id. Store the data type in another variable called device_id_type. Then, display device_id_type to examine the output.
'''

device_id = "72e08x0"
device_id_type = type(device_id)
print(device_id_type)

'''
As you continue your work, you're provided a list of usernames of users who are allowed to access the device. The usernames with this access are `"madebowa"`, `"jnguyen"`, `"tbecker"`, `"nhersh"`, and `"redwards"`.

In this task, create a variable called `username_list`. Assign a list with the approved usernames to this variable. Then, display the value of the `username_list` variable.
'''

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]
print(username_list)

'''
n this task, find the data type of the username_list. Store the type in a variable called username_list_type. Then, display username_list_type to examine the output.
'''

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]
username_list_type = type(username_list)
print(username_list_type)

'''
Now, imagine that you've been informed that the previous list is not up-to-date and that there is another employee that now has access to the device. You're given the updated list of usernames with access, including the new employee, as follows: "madebowa", "jnguyen", "tbecker", "nhersh", "redwards", and "lpope".
In this task, reassign the variable username_list to the new list. Run the code to display the list before and after it's been updated to observe the difference.
'''

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]
print(username_list)
# Updated user list
username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards", "lpope"]
print(username_list)

'''
In this task, define a variable called max_logins that represents the maximum number of login attempts allowed per user. Store the value 3 in this variable. Then, store its data type in another variable called max_logins_type. Display max_logins_type to examine the output.
'''

max_logins = 3
max_login_type = type(max_logins)
print(max_logins_type)

'''
Task 7
In this task, define a variable called login_attempts that represents the current number of login attempts made by a user. Store the value 2 in this variable. Then, store its data type in a variable called login_attempts_type. Display login_attempts_type to observe the output.
'''

login_attempts = 2
login_attempts_type = type(login_attempts)
print(login_attempts_type)

'''
Task 8
In this task, you'll determine the Boolean value that represents whether the current number of login attempts a user has made is less than or equal to the maximum number of login attempts allowed.
'''

max_logins = 3
login_attempts = 2
print(login_attempts <= max_logins)

'''
This code continues to check for the Boolean value of whether max_logins is less than or equal to login_attempts. In this task, reassign other values to login_attempts. For example, you might choose a value that is higher than the maximum number of attempts allowed. Observe how the output changes.
'''

max_logins = 3
login_attempts = 4
print(login_attempts <= max_logins)

'''
Task 10
Finally, you can also assign a Boolean value of True or False to a variable.
In this task, you'll create a variable called login_status, which is a Boolean that represents whether a user is logged in. Assign False to this variable and store its data type in a variable called login_status_type and display it.
'''

login_status = False
login_status_type = type(login_status)
print(login_status_type)

